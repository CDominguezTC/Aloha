/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Servlet;

import Controladores.ControladorAreas;
import Controladores.ControladorCiudades;
import Controladores.ControladorCentroCosto;
import Controladores.ControladorDependencias;
import Controladores.ControladorFunciones;
import Controladores.ControladorGrupoTurnos;
import Herramienta.Herramienta;
import Modelo.ModeloAreas;
import Modelo.ModeloCiudad;
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 *
 * @author Carlos A Dominguez D
 */
public class ServletAlohaTiempos extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter())
        {
            /* TODO output your page here. You may use following sample code. */
            out.println("<!DOCTYPE html>");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet ServletAlohaTiempos</title>");
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet ServletAlohaTiempos at " + request.getContextPath() + "</h1>");
            out.println("</body>");
            out.println("</html>");
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        //processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        String Formulario = request.getParameter("frm");
        Herramienta herramienta = new Herramienta();
        String Resultado = "";
        String Accion;
        switch (Formulario)
        {
            case "AreasJSP":
                ControladorAreas controladorAreas = new ControladorAreas();
                Accion = request.getParameter("accion");
                switch (Accion)
                {
                    case "Upload":
                        Resultado = controladorAreas.Insert(request);
                        break;
                    case "Delete":
                        Resultado = controladorAreas.Delete(request);
                        break;
                    case "Read":
                        Resultado = controladorAreas.ReadArea(request, response);
                        PrintWriter pw = response.getWriter();
                        pw.write(Resultado);
                        System.out.println(pw.checkError() ? "Error al cargar la lista" : "Tabla Cargada");
                        break;
                }

                break;
            case "CiudadJSP":
                ControladorCiudades controladorCiudades = new ControladorCiudades();
                Accion = request.getParameter("accion");
                switch (Accion)
                {
                    case "Upload":
                        Resultado = controladorCiudades.Insert(request);
                        break;
                    case "Delete":
                        Resultado = controladorCiudades.Delete(request);
                        break;
                    case "Read":
                        Resultado = controladorCiudades.ReadCiudad(request, response);
                        PrintWriter pw = response.getWriter();
                        pw.write(Resultado);
                        System.out.println(pw.checkError() ? "Error al cargar la lista" : "Tabla Cargada");
                        break;
                }

                break;
                case "CentroCostoJSP":
                ControladorCentroCosto controladorCentroCosto = new ControladorCentroCosto();
                Accion = request.getParameter("accion");
                switch (Accion)
                {
                    case "Upload":
                        Resultado = controladorCentroCosto.Insert(request);
                        break;
                    case "Delete":
                        Resultado = controladorCentroCosto.Delete(request);
                        break;
                    case "Read":
                        Resultado = controladorCentroCosto.ReadCentroCostos(request, response);
                        PrintWriter pw = response.getWriter();
                        pw.write(Resultado);
                        System.out.println(pw.checkError() ? "Error al cargar la lista" : "Tabla Cargada");
                        break;
                }
                
                 break;
                 case "DependenciasJSP":
                 ControladorDependencias controladorDependencias = new ControladorDependencias();
                 Accion = request.getParameter("accion");
                 switch (Accion)
                 {
                    case "Upload":
                        Resultado = controladorDependencias.Insert(request);
                        break;
                    case "Delete":
                        Resultado = controladorDependencias.Delete(request);
                        break;
                    case "Read":
                        Resultado = controladorDependencias.ReadDependencias(request, response);
                        PrintWriter pw = response.getWriter();
                        pw.write(Resultado);
                        System.out.println(pw.checkError() ? "Error al cargar la lista" : "Tabla Cargada");
                        break;
                 }
                 
                 break;
                 case "GrupoTurnosJSP":
                 ControladorGrupoTurnos controladorGrupoTurnos = new ControladorGrupoTurnos();
                 Accion = request.getParameter("accion");
                 switch (Accion)
                 {
                    case "Upload":
                        Resultado = controladorGrupoTurnos.Insert(request);
                        break;
                    case "Delete":
                        Resultado = controladorGrupoTurnos.Delete(request);
                        break;
                    case "Read":
                        Resultado = controladorGrupoTurnos.ReadGrupoTurnos(request, response);
                        PrintWriter pw = response.getWriter();
                        pw.write(Resultado);
                        System.out.println(pw.checkError() ? "Error al cargar la lista" : "Tabla Cargada");
                        break;
                 }
                
                 break;
                 case "FuncionesJSP":
                 ControladorFunciones controladorFunciones = new ControladorFunciones();
                 Accion = request.getParameter("accion");
                 switch (Accion)
                 {
                    case "Upload":
                        Resultado = controladorFunciones.Insert(request);
                        break;
                    case "Delete":
                        Resultado = controladorFunciones.Delete(request);
                        break;
                    case "Read":
                        Resultado = controladorFunciones.ReadFunciones(request, response);
                        PrintWriter pw = response.getWriter();
                        pw.write(Resultado);
                        System.out.println(pw.checkError() ? "Error al cargar la lista" : "Tabla Cargada");
                        break;
                 }
                
                 break;      
                
        }
        String respuesta = herramienta.GetDescrpCode(Resultado);
        response.setCharacterEncoding("UTF-8");
        response.setContentType("text/plain");
        response.getWriter().write(respuesta);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Servlet para el control de procesos de AlohaTiempos";
    }// </editor-fold>

}
