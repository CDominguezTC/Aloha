<!DOCTYPE html>
<canvas id="canvas" width="450" height="450" style="background:rgb(243, 245,240)"></canvas>
<input type="hidden" id="whetherModify" name="whetherModify" alt="" value="111" />
<div id="duressFingerDiv" style="position: absolute; left: 310px; top: 300px; width: 140px; height: 23px; diaplay: block;">
	<input type="checkbox" id="duressFinger" name="checkboxName">&nbsp;${base_fp_duressFinger}</input><!-- ${base_fp_duressFinger}:胁迫指纹 -->
</div>
<div style="position: absolute; left: 310px; top: 325px; width: 70px; height: 28px;">
	<button type="button" id="submitButtonId" name="makeSureName" onclick="submitEvent()" class="button-form">
		${common_edit_ok}
	</button>
	<!-- ${common_edit_ok}:确定 -->
</div>
<div style="position: absolute; left: 310px; top: 365px; width: 70px; height: 28px; ">
	<button class="button-form" type="button" id="closeButton" name="closeButton" onclick="cancelEvent('${base_fp_save}', '${pers_person_templateCount}:');">
		${common_edit_cancel}
	</button>
	<!-- ${common_edit_cancel}:取消 -->
</div>
<script type="text/javascript">
//绘画双手的起点横坐标
var x = 28;
//绘画双手的起点纵坐标
var y = 346;
//存放画手指函数的数组
var fingerList = [];
//保存当前正在采集的手指标记--删除时，消除当前正在采集的手指颜色时用到
var lastFPIdNum = null;
//全局2d画笔
var globalContext = null;
//绘画手指的边框颜色
var fingerBorderColor = "rgb(71,75,79)";
//页面右上角圆弧的背景色
//var arcBgColor = "rgb(243, 245,240)";
//页面背景色
var bgColor = "rgb(243, 245,240)";
//绘画的图形边框样式--边线绘图
var strokeStyle = "stroke";
//绘画的图形填充样式--填充绘图
var fillStyle = "fill";
//点击手指 的颜色
var fillFingerColor="rgb(71,75,79)";
//判断是否修改了数据(包括新增和删除)
var fpModifyFlag = false;


/**
 * 画椭圆 -- 给context添加绘画椭圆的属性
 * @author wenxin
 * @create 2013-05-15 10:11:21 am
 * @param x, y 椭圆定位的坐标
 * @param width, height 椭圆的宽度和高度
 */
CanvasRenderingContext2D.prototype.oval = function  (x, y, width, height) 
{
    var k = (width/0.75)/2,w = width/2,h = height/2;
    this.strokeStyle = bgColor;
	this.beginPath();
	
	this.moveTo(x, y-h);
	this.bezierCurveTo(x+k, y-h, x+k, y+h, x, y+h);
	this.bezierCurveTo(x-k, y+h, x-k, y-h, x, y-h);
	this.closePath();
	this.stroke();
	return this;
}
/**
 * 点击确定按钮时，触发事件
 * @author wenxin
 * @create 2013-05-15 17:12:21 pm
 * @param ${pers_person_templateCount}:指纹数
 */
function submitEvent()
{
	storeDataToHtml();
	showFPCount('${pers_person_templateCount}:');
	closeWindow();
}
 /**
 * 查动态库连接回调函数
 * @author wenxin
 * @create 2013-05-15 17:12:21 pm
 * @param ${pers_person_templateCount}:指纹数
 */
function getDLLConnectCallBack(result)
{
	 if(globalContext == null)
	 {
		 globalContext = document.getElementById("canvas").getContext("2d");
	 }
	//返回码
	var ret = null;
	ret = result.ret;
	//接口调用成功返回时
	if(ret == 0)
	{
		//${base_fp_connectFail}:连接指纹采集器失败
		collectTips(globalContext, "${base_fp_connectFail}", "html5");
	}
	else
	{
		//${base_fp_loadFail}:加载ZKFinger10失败
		collectTips(globalContext, "${base_fp_loadFail}", "html5");
	}
}
/**
 * 采集指纹
 * @author wenxin
 * @create 2013-05-13 10:18:31 am
 * @param context 2d画布上下文
 */
function fpCollection(context) 
{
	$.ajax( {
		type : "GET",
		url : issOnlineUrl+"/beginCapture?type=1&random="+getRandomNum(),
		dataType : "json",
		async: true,
		success : function(result) 
		{
			//返回码
			var ret = null;
			ret = result.ret;
			//接口调用成功返回时
			if(ret == 0)
			{
				//检查采集次数、显示图像
				checkCollCount();
			}
			else if(ret == -2001)
			{
				//${base_fp_connectFail}:连接指纹采集器失败
				//显示框--采集提示
				collectTips(globalContext, "${base_fp_connectFail}", "html5");
			}
			else if(ret == -2002)
			{
				getWebServerInfo(null, null, "1");
			}
			else if(ret == -2005)
			{
				//取消采集
				cancelRegister();
				//切换手指后，渲染手指(消除原来手指的颜色)
				renderAfterColl(globalContext, fpIdNum, bgColor, false);
				//${base_fp_pressFinger}:请选择手指
				//显示框--采集提示
				collectTips(globalContext, "${base_fp_pressFinger}", "html5");
			}
		},
		error : function(XMLHttpRequest, textStatus, errorThrown) 
		{
			messageBox({messageType: "alert", title: "${common_prompt_title}", text: "${base_fp_connectPrompt}"});
	    }
	});
}
/**
 * 检查采集次数
 * @author wenxin
 * @create 2013-05-22 09:24:31 am
 * @param collCount 采集次数
 */
function checkCollCount()
{
	var base64FPImg = "";
	//返回码
	var ret = null;
	$.ajax( {
		type : "GET",
		url : issOnlineUrl+"/getImage?random="+getRandomNum(),
		dataType : "json",
		async: false,
		success : function(result) 
		{
			//alert(objToStr(data));
			//指纹采集次数
			var collCount = 0;
			ret = result.ret;
			if(ret == 0)
			{
				collCount = result.data.enroll_index;
				base64FPImg = result.data.jpg_base64;
			}
			if(collCount != 3)
			{
				//第一次和第二次采集，显示采集次数、指纹图像、进度条
				if(collCount == 1 || collCount == 2)
				{
					//${base_fp_collCount}:按压指纹剩余次数:
					var text = "${base_fp_collCount}"+(FINGERPRINT_NUMBER - collCount);
					//显示框--采集提示
					collectTips(globalContext, text, "html5");
					//进度条
					drawProgressBar(globalContext, collCount);
					//显示指纹图像
					showImage(globalContext, base64FPImg, "html5");
					//清空图像
					setTimeout("clearImageData()", 1000);
				}
				//定时器
				timer = setTimeout("checkCollCount()", 1000);
			}
			else
			{
				//显示指纹图像
				showImage(globalContext, base64FPImg, "html5");
				//清空图像
				setTimeout("clearImageData()", 1000);
				//存放国际化元素数组
				var paramArray = new Array();
				paramArray[0] = "${base_fp_registerSuccess}";//base_fp_registerSuccess:成功登记指纹
				paramArray[1] = "${base_fp_pressFingerAgain}";//base_fp_pressFingerAgain:请重按手指
				paramArray[2] = "${base_fp_repeatCollection}";//base_fp_repeatCollection:请不要重复录入指纹!
				paramArray[3] = "${base_fp_connectPrompt}";//base_fp_connectPrompt:请检查网络连接
				//进度条
				drawProgressBar(globalContext, collCount);
				//获取指纹模板
				if(!getFPTemplate(paramArray, "register"))
				{
					drawProgressBar(globalContext, 0);//进度条灰显
				}
				
				//如果胁迫指纹选中，则取消选中
				if(duressFingerFlag)
				{
					$("#duressFinger").attr("checked", false);
				}
				$("#duressFinger").attr("disabled", false);
				$("#submitButtonId").attr("disabled", false);
				collectFlag = false;
				fpIdNum = -1;
				return collCount;
			}
		},
		error : function(XMLHttpRequest, textStatus, errorThrown) 
		{
			messageBox({messageType: "alert", title: "${common_prompt_title}", text: "${base_fp_connectPrompt}"});
	    }
	});
	
}
/**
 * 修改setTimeout
 * source code from network
 * @author wenxin
 * @create 2013-05-22 11:10:31 am
 * @param callback 回调函数
 * @param timeout 调用时间
 * @param param 需要调用的函数入参
 */
/*var _sto = setTimeout; 
window.setTimeout = function(callback,timeout,param) 
{ 
	var args = Array.prototype.slice.call(arguments,2); 
	var _cb = function() 
	{ 
		callback.apply(null,args); 
	} 
	_sto(_cb,timeout); 
}*/
/**
 * 取消采集，当采集中断时
 * @author wenxin
 * @create 2013-05-27 17:46:31 pm
 */
function cancelRegister()
{
	//当前有手指在采集指纹
	if(collectFlag)
	{
		//将定时器的递归调用关闭
		clearTimeout(timer);
		//取消采集
		$.ajax( {
			type : "GET",
			url : issOnlineUrl+"/cancelCapture?random="+getRandomNum(),
			dataType : "json",
			async: false,
			success : function(result) 
			{
				//如果胁迫指纹选中，则取消选中
				if(duressFingerFlag)
				{
					$("#duressFinger").attr("checked", false);
				}
				if(fpModifyFlag)
				{
					$("#submitButtonId").attr("disabled", false);
				}
				$("#duressFinger").attr("disabled", false);
				if(fpIdNum != null)
				{
					//消除原来手指的颜色
					
					renderAfterColl(globalContext, lastFPIdNum, bgColor, false);
				}
				collectFlag = false;
			},
			error : function(XMLHttpRequest, textStatus, errorThrown) 
			{
				messageBox({messageType: "alert", title: "${common_prompt_title}", text: "${base_fp_connectPrompt}"});
		    }
		});
	}
}
/**
 * 绘画
 * @author wenxin
 * @create 2013-05-13 10:18:31 am
 * @param context 2d画布上下文
 * @param x, y 绘画左手掌的第一个点的坐标，后面的绘画手指和右手掌的坐标都是相对于此点坐标来计算
 * @param color 绘画手指和手掌的边框颜色
 */
function draw(context, x, y, color) 
{
	var coordArray = new Array();
	//初始化起始坐标,并返回json格式数据 
	var coordJson = initCoordJson();
	for(var i=0; i<coordJson.length; i++)
	{
		//绘画双手和圆弧
		drawHandAndArc(context, coordArray, color, coordJson[i].coord.x, coordJson[i].coord.y, coordJson[i].num);
// 		drawHandAndArc(context, coordArray, color, coordJson[i].coord.x, coordJson[i].coord.y, i);
		coordArray = null;
		coordArray = new Array();
	}
	//存放国际化元素数组
	var paramArray = new Array();
	paramArray[0] = "${base_fp_pressFinger}";
	paramArray[1] = "${base_fp_connectFail}";
	paramArray[2] = "${base_fp_loadFail}";
	paramArray[3] = "${base_fp_pressFinger}";
	
	//检查指纹采集器
	checkFPReader(context, paramArray, "html5");
	
	//进度条
	drawProgressBar(context, 0);
	//将确定按钮置灰
	$("#submitButtonId").attr("disabled", true);
}
/**
 * 绘画双手和圆弧
 * @author wenxin
 * @create 2013-06-17 10:18:31 am
 * @param context 2d画布上下文
 * @param coordArray 坐标数组
 * @param x, y 绘画左手掌的第一个点的坐标，后面的绘画手指和右手掌的坐标都是相对于此点坐标来计算
 * @param color 绘画手指和手掌的边框颜色
 * @param num 当前会话对象编号
 */
function drawHandAndArc(context, coordArray, color, x, y, num)
{
	//初始化坐标
	coordArray = initCoordArray(coordArray, x, y, num);
	var drawObj = null;
	//绘画手指
	if(num < 10)
	{
		drawObj = "finger"+num;
		drawObj = new renderFinger(context, coordArray);
		drawObj.drawFinger(strokeStyle, color);
		//初始化时，渲染手指
		renderInit(context, num, "html5");
		//将绘画的手指实例放入数组，方便重画时用
		fingerList.push(drawObj);
	}
	//绘画双手掌心
	else if(num < 12)
	{
		new renderHand(context, coordArray).drawHand(color);
	}
	//绘画圆圈
	showImage(context, "${base}/base/images/base_fpVerify_clearImage.png", "clearForRegister");
	//绘画圆弧
	//else if(num == 12)
	//{
	//	new FillArc(context, coordArray).drawArc(arcBgColor);
	//}
}
/**
 * 重画
 * @author wenxin
 * @create 2013-05-13 10:18:31 am
 * @param x, y 鼠标点击处的坐标
 */
function redraw(x, y) 
{
	var canvas = document.getElementById("canvas");
	if (canvas.getContext) 
	{
		var context = canvas.getContext("2d");
		
		//是否点击在手指区域
		var isInFingerArea = false;
		//判断当前点击是否在手指区域
		for ( var i = 0; i < fingerList.length; i++)
		{
			var finger = fingerList[i];
			finger.drawFinger(strokeStyle, fingerBorderColor);
			if (context.isPointInPath(x, y))
			{
				isInFingerArea = true;
				break;
			}
		}
		
		outerloop:
		for ( var i = 0; i < fingerList.length; i++) 
		{
			if(collectFlag)
			{
				//当点击的是同一个手指时，如何判断?(编辑指纹时，有问题)
				if(fpIdNum == i)
				{
					//切换手指后，渲染手指(消除原来手指的颜色)
					renderAfterColl(globalContext, fpIdNum, bgColor, false);
				}
			}
			var finger = fingerList[i];
			finger.drawFinger(strokeStyle, fingerBorderColor);
			//currentContext = context;
			if (context.isPointInPath(x, y)) 
			{
				globalContext = context;
				//两次是否点击的同一个手指进行采集。如果是，则第二次点击时取消采集。
				var iaSameFinger = false;
				if(fpIdNum == i && collectFlag)
				{
					iaSameFinger = true;
				}
				var fingerId;
				//判断该手指是否已经有指纹
				var isCollected = false;
				isCollected = isContains(fingerIdArray, i);
				fpIdNum = i;
				if(!isCollected)
				{
					//保存当前正在采集的手指标记
					lastFPIdNum = fpIdNum;
				}
				//如果已经有指纹
				if(isCollected)
				{
					//取消采集
					cancelRegister();
					messageBox({
						messageType : "confirm",
						text : "${base_fp_del}",//${base_fp_del}:删除当前选中的指纹吗?
						callback : function(result){
							delFPData(result, context, "html5");
							collectTips(globalContext, "${base_fp_pressFinger}", "html5");
							//进度条
							drawProgressBar(globalContext, 0);
						}
					});
					break outerloop;
				}
				else
				{
					//两次点击的同一个手指进行采集，则第二次取消采集。
					if(iaSameFinger)
					{
						//取消采集
						cancelRegister();
						//取消采集后重新提示请选择手指
						collectTips(globalContext, "${base_fp_pressFinger}", "html5");
						//取消采集后重新绘制进度条
						drawProgressBar(context, 0);
						fpIdNum = -1;
					}
					else
					{
						//取消采集
						cancelRegister();
						context.fillStyle = fillFingerColor;
						context.fill();
						//globalContext = context;
						collectFlag = true;//需要判断，当重复点击时，颜色改变
						$("#duressFinger").attr("disabled", true);
						$("#submitButtonId").attr("disabled", true);
						//${base_fp_collCount}:按压指纹剩余次数:
						var text = "${base_fp_collCount}"+FINGERPRINT_NUMBER;
						//进度条
						drawProgressBar(globalContext, 0);
						//显示框--采集提示
						collectTips(globalContext, text, "html5");
						//指纹采集
						fpCollection(context);
					}
				}
			} 
			else 
			{
				context.fillStyle = bgColor;
				context.fill(); 
				renderInit(context, i, "html5");
				if(collectFlag)
				{
					if(fpIdNum == i && !isInFingerArea)
					{
						context.fillStyle = fillFingerColor;
						context.fill();
					}
				}
			}
		}
	}
}
/**
 * 清空
 * @author wenxin
 * @create 2013-09-05 16:57:11 pm
 */
function clearImageData()
{
	//清空指纹图像
	clearFPImage(globalContext, "register");
}
/**
 * 页面加载时，初始化数据
 * @author wenxin
 * @create 2013-07-09 15:18:31 pm
 */
function dataInit()
{
	if(!duressFingerShowFlag)
	{
		$("#duressFingerDiv").hide();
	}
	var canvas = document.getElementById("canvas");
	var context = canvas.getContext("2d");
	
	fpIdNum = null;
	//获取页面的指纹数据
	getDataFromPage();
	//绘画
	draw(context, x, y, fingerBorderColor);
	//jquery在ie下实现cors跨域请求
	jQuery.support.cors = true;
	//鼠标事件
	canvas.onmousedown = function(event){
		//event.which == 1--鼠标左键
		if(event.which == 1)
		{
			var pageInfo = canvas.getBoundingClientRect();
			var x = event.clientX - pageInfo.left;
			var y = event.clientY - pageInfo.top;
	
			duressFingerFlag = $("#duressFinger").attr("checked");
			//重画
			redraw(x, y);
		}
	}
}
//初始化数据
dataInit();
</script>